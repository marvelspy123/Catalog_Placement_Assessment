const fs = require('fs');

// Helper function to decode a value in a specific base
function decodeValue(base, value) {
    return parseInt(value, base);
}

// Lagrange interpolation function to find the constant term 'c'
function lagrangeInterpolation(points) {
    let constantTerm = 0;

    for (let i = 0; i < points.length; i++) {
        let xi = points[i][0];
        let yi = points[i][1];

        // Calculate the product for Lagrange basis polynomial L_i(0)
        let term = yi;
        for (let j = 0; j < points.length; j++) {
            if (i !== j) {
                let xj = points[j][0];
                term *= (-xj) / (xi - xj);
            }
        }

        constantTerm += term;
    }

    return Math.round(constantTerm); // Since the constant term must be an integer
}

// Function to read JSON input, decode values, and compute the secret 'c'
function findSecretConstant(filePath) {
    const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    const n = data.keys.n;
    const k = data.keys.k;

    let points = [];

    // Collect the first k roots, decode them and prepare (x, y) points
    let count = 0;
    for (let key in data) {
        if (key !== 'keys') {
            let x = parseInt(key); // x is the key of the object
            let base = parseInt(data[key].base);
            let value = data[key].value;
            let y = decodeValue(base, value); // Decode y value from given base

            points.push([x, y]);
            count++;

            if (count === k) break; // Only collect the minimum required points (k)
        }
    }

    // Use Lagrange interpolation to calculate the constant term 'c'
    const constantTerm = lagrangeInterpolation(points);

    console.log(`The secret constant 'c' is: ${constantTerm}`);
}

findSecretConstant('testcase1.json');
findSecretConstant('testcase2.json');
